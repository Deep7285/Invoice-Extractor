{
  "version": 3,
  "sources": ["../../../src/schema_and_prompt.ts", "../../../src/worker.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../bundle-JkjA58/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-JkjA58/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\deepa\\OneDrive\\Desktop\\Invoice extracor\\invoice-worker\\.wrangler\\tmp\\dev-8cBZSk",
  "sourcesContent": ["// src/schema_and_prompt.ts\r\nexport const SCHEMA_ID = \"invoice_v1\";\r\n\r\nexport const JSON_SCHEMA = {\r\n  name: SCHEMA_ID,\r\n  schema: {\r\n    type: \"object\",\r\n    additionalProperties: false,\r\n    properties: {\r\n      seller: {\r\n        type: \"object\",\r\n        additionalProperties: false,\r\n        properties: {\r\n          company_name: { type: [\"string\", \"null\"] },\r\n          gstin: { type: [\"string\", \"null\"] },\r\n          address: { type: [\"string\", \"null\"] }\r\n        },\r\n        required: [\"company_name\", \"gstin\", \"address\"]\r\n      },\r\n      invoice: {\r\n        type: \"object\",\r\n        additionalProperties: false,\r\n        properties: {\r\n          number: { type: [\"string\", \"null\"] },\r\n          date: { type: [\"string\", \"null\"] },              // DD-MM-YYYY\r\n          transaction_id: { type: [\"string\", \"null\"] }\r\n        },\r\n        required: [\"number\", \"date\", \"transaction_id\"]\r\n      },\r\n      taxes: {\r\n        type: \"array\",\r\n        items: {\r\n          type: \"object\",\r\n          additionalProperties: false,\r\n          properties: {\r\n            type: { type: \"string\", enum: [\"CGST\", \"SGST\", \"IGST\", \"CESS\", \"OTHER\"] },\r\n            rate_percent: { type: [\"number\", \"null\"] },\r\n            amount: { type: [\"number\", \"null\"] }\r\n          },\r\n          required: [\"type\", \"rate_percent\", \"amount\"]\r\n        }\r\n      },\r\n      amounts: {\r\n        type: \"object\",\r\n        additionalProperties: false,\r\n        properties: {\r\n          taxable_amount: { type: [\"number\", \"null\"] },\r\n          total_amount: { type: [\"number\", \"null\"] }\r\n        },\r\n        required: [\"taxable_amount\", \"total_amount\"]\r\n      }\r\n    },\r\n    required: [\"seller\", \"invoice\", \"taxes\", \"amounts\"]\r\n  },\r\n  strict: true\r\n} as const;\r\n\r\nexport const SYSTEM_PROMPT = `You are an expert invoice parser for Indian GST invoices.\r\nReturn ONLY a JSON object that strictly matches the provided JSON schema.\r\n- If a field is not present, set it to null (do not guess).\r\n- Normalize date to DD-MM-YYYY when possible.\r\n- 'seller.company_name' is the SELLER/ISSUER (not the buyer).\r\n- Extract all tax lines (CGST/SGST/IGST/... with rate and amount).\r\n- Choose the grand total for total_amount.\r\n- No text outside the JSON.`;\r\n\r\nexport const USER_INSTRUCTIONS = `Parse the attached invoice content (images) into the schema.\r\nPrefer explicit labels; if absent, infer from layout, headers, or letterhead.\r\nIf multiple totals exist, return the grand total (post-tax). Use null for missing fields.`;\r\n", "// src/worker.ts\r\nimport { JSON_SCHEMA, SYSTEM_PROMPT, USER_INSTRUCTIONS } from \"./schema_and_prompt\";\r\n\r\ntype Env = {\r\n  OPENAI_API_KEY: string;     // set via wrangler secret\r\n  ALLOWED_ORIGIN?: string;    // set in wrangler.toml [vars]\r\n};\r\n\r\nconst MODEL = \"gpt-4o-mini\";  // change to gpt-4o if needed\r\n\r\n// CORS helper\r\nfunction cors(h: Headers, origin?: string) {\r\n  h.set(\"Access-Control-Allow-Origin\", origin ?? \"*\");\r\n  h.set(\"Access-Control-Allow-Methods\", \"POST, OPTIONS\");\r\n  h.set(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization\");\r\n  h.set(\"Access-Control-Max-Age\", \"86400\");\r\n}\r\n\r\nexport default {\r\n  async fetch(req: Request, env: Env): Promise<Response> {\r\n    const origin = env.ALLOWED_ORIGIN || \"*\";\r\n\r\n    if (req.method === \"OPTIONS\") {\r\n      const r = new Response(null, { status: 204 });\r\n      cors(r.headers, origin);\r\n      return r;\r\n    }\r\n\r\n    if (req.method !== \"POST\") {\r\n      const r = new Response(\"Use POST /api/extract\", { status: 405 });\r\n      cors(r.headers, origin);\r\n      return r;\r\n    }\r\n\r\n    try {\r\n      const ctype = req.headers.get(\"content-type\") || \"\";\r\n      if (!ctype.includes(\"multipart/form-data\")) {\r\n        const r = new Response(\"Expected multipart/form-data\", { status: 400 });\r\n        cors(r.headers, origin);\r\n        return r;\r\n      }\r\n\r\n      const form = await req.formData();\r\n\r\n      // Accept up to 10 images (already rasterized on the client)\r\n      // We support either:\r\n      //  - images[]=<binary blob> (image/jpeg|png)\r\n      //  - images_dataurl[]=<data:image/...;base64,...>\r\n      const images: Array<{type:\"image_url\"; image_url:{url:string}}> = [];\r\n\r\n      const dataurlList = form.getAll(\"images_dataurl[]\");\r\n      for (const v of dataurlList) {\r\n        if (typeof v === \"string\" && v.startsWith(\"data:image/\")) {\r\n          images.push({ type: \"image_url\", image_url: { url: v } });\r\n        }\r\n      }\r\n\r\n      const binList = form.getAll(\"images[]\");\r\n      for (const v of binList) {\r\n        if (v instanceof File) {\r\n          // Convert binary to data URL (small helper)\r\n          const buf = await v.arrayBuffer();\r\n          const b64 = btoa(String.fromCharCode(...new Uint8Array(buf)));\r\n          const mime = v.type || \"image/png\";\r\n          images.push({ type: \"image_url\", image_url: { url: `data:${mime};base64,${b64}` } });\r\n        }\r\n      }\r\n\r\n      if (images.length === 0) {\r\n        const r = new Response(\"No images provided\", { status: 400 });\r\n        cors(r.headers, origin);\r\n        return r;\r\n      }\r\n      if (images.length > 10) {\r\n        const r = new Response(\"Max 10 pages/images allowed\", { status: 400 });\r\n        cors(r.headers, origin);\r\n        return r;\r\n      }\r\n\r\n      // Build OpenAI Responses API payload\r\n      const payload = {\r\n        model: MODEL,\r\n        messages: [\r\n          { role: \"system\", content: [{ type: \"text\", text: SYSTEM_PROMPT }] },\r\n          { role: \"user\", content: [{ type: \"text\", text: USER_INSTRUCTIONS }, ...images] }\r\n        ],\r\n        response_format: {\r\n          type: \"json_schema\",\r\n          json_schema: JSON_SCHEMA\r\n        },\r\n        temperature: 0\r\n      };\r\n\r\n      const oai = await fetch(\"https://api.openai.com/v1/responses\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Authorization\": `Bearer ${env.OPENAI_API_KEY}`,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(payload)\r\n      });\r\n\r\n      if (!oai.ok) {\r\n        const errText = await oai.text();\r\n        const r = new Response(`OpenAI error: ${oai.status} ${errText}`, { status: 502 });\r\n        cors(r.headers, origin);\r\n        return r;\r\n      }\r\n\r\n      // responses API returns a structured object; we only need the plain JSON string\r\n      const body = await oai.json();\r\n      // In Workers we don't have SDK sugar; responses API provides a consolidated text field in some SDKs.\r\n      // Here we read the output from the top-level content. Fall back to parsing \"output_text\" if present.\r\n      const outputText =\r\n        body.output_text ??\r\n        body.output?.[0]?.content?.[0]?.text ??\r\n        body.choices?.[0]?.message?.content; // safety fallback\r\n\r\n      const json = typeof outputText === \"string\" ? outputText : JSON.stringify(outputText);\r\n      // Return JSON to the client\r\n      const r = new Response(json, { status: 200, headers: { \"Content-Type\": \"application/json\" } });\r\n      cors(r.headers, origin);\r\n      return r;\r\n\r\n    } catch (e: any) {\r\n      const r = new Response(`Worker error: ${e?.message ?? e}`, { status: 500 });\r\n      cors(r.headers, env.ALLOWED_ORIGIN || \"*\");\r\n      return r;\r\n    }\r\n  }\r\n} satisfies ExportedHandler<Env>;\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\deepa\\\\OneDrive\\\\Desktop\\\\Invoice extracor\\\\invoice-worker\\\\src\\\\worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\deepa\\\\OneDrive\\\\Desktop\\\\Invoice extracor\\\\invoice-worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\deepa\\\\OneDrive\\\\Desktop\\\\Invoice extracor\\\\invoice-worker\\\\src\\\\worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\deepa\\\\OneDrive\\\\Desktop\\\\Invoice extracor\\\\invoice-worker\\\\.wrangler\\\\tmp\\\\bundle-JkjA58\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\deepa\\\\OneDrive\\\\Desktop\\\\Invoice extracor\\\\invoice-worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\deepa\\\\OneDrive\\\\Desktop\\\\Invoice extracor\\\\invoice-worker\\\\.wrangler\\\\tmp\\\\bundle-JkjA58\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\deepa\\\\OneDrive\\\\Desktop\\\\Invoice extracor\\\\invoice-worker\\\\.wrangler\\\\tmp\\\\bundle-JkjA58\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": ";;;;AACO,IAAM,YAAY;AAElB,IAAM,cAAc;AAAA,EACzB,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,sBAAsB;AAAA,IACtB,YAAY;AAAA,MACV,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,sBAAsB;AAAA,QACtB,YAAY;AAAA,UACV,cAAc,EAAE,MAAM,CAAC,UAAU,MAAM,EAAE;AAAA,UACzC,OAAO,EAAE,MAAM,CAAC,UAAU,MAAM,EAAE;AAAA,UAClC,SAAS,EAAE,MAAM,CAAC,UAAU,MAAM,EAAE;AAAA,QACtC;AAAA,QACA,UAAU,CAAC,gBAAgB,SAAS,SAAS;AAAA,MAC/C;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,sBAAsB;AAAA,QACtB,YAAY;AAAA,UACV,QAAQ,EAAE,MAAM,CAAC,UAAU,MAAM,EAAE;AAAA,UACnC,MAAM,EAAE,MAAM,CAAC,UAAU,MAAM,EAAE;AAAA;AAAA,UACjC,gBAAgB,EAAE,MAAM,CAAC,UAAU,MAAM,EAAE;AAAA,QAC7C;AAAA,QACA,UAAU,CAAC,UAAU,QAAQ,gBAAgB;AAAA,MAC/C;AAAA,MACA,OAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO;AAAA,UACL,MAAM;AAAA,UACN,sBAAsB;AAAA,UACtB,YAAY;AAAA,YACV,MAAM,EAAE,MAAM,UAAU,MAAM,CAAC,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,EAAE;AAAA,YACxE,cAAc,EAAE,MAAM,CAAC,UAAU,MAAM,EAAE;AAAA,YACzC,QAAQ,EAAE,MAAM,CAAC,UAAU,MAAM,EAAE;AAAA,UACrC;AAAA,UACA,UAAU,CAAC,QAAQ,gBAAgB,QAAQ;AAAA,QAC7C;AAAA,MACF;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,sBAAsB;AAAA,QACtB,YAAY;AAAA,UACV,gBAAgB,EAAE,MAAM,CAAC,UAAU,MAAM,EAAE;AAAA,UAC3C,cAAc,EAAE,MAAM,CAAC,UAAU,MAAM,EAAE;AAAA,QAC3C;AAAA,QACA,UAAU,CAAC,kBAAkB,cAAc;AAAA,MAC7C;AAAA,IACF;AAAA,IACA,UAAU,CAAC,UAAU,WAAW,SAAS,SAAS;AAAA,EACpD;AAAA,EACA,QAAQ;AACV;AAEO,IAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAStB,IAAM,oBAAoB;AAAA;AAAA;;;AC1DjC,IAAM,QAAQ;AAGd,SAAS,KAAK,GAAY,QAAiB;AACzC,IAAE,IAAI,+BAA+B,UAAU,GAAG;AAClD,IAAE,IAAI,gCAAgC,eAAe;AACrD,IAAE,IAAI,gCAAgC,6BAA6B;AACnE,IAAE,IAAI,0BAA0B,OAAO;AACzC;AALS;AAOT,IAAO,iBAAQ;AAAA,EACb,MAAM,MAAM,KAAc,KAA6B;AACrD,UAAM,SAAS,IAAI,kBAAkB;AAErC,QAAI,IAAI,WAAW,WAAW;AAC5B,YAAM,IAAI,IAAI,SAAS,MAAM,EAAE,QAAQ,IAAI,CAAC;AAC5C,WAAK,EAAE,SAAS,MAAM;AACtB,aAAO;AAAA,IACT;AAEA,QAAI,IAAI,WAAW,QAAQ;AACzB,YAAM,IAAI,IAAI,SAAS,yBAAyB,EAAE,QAAQ,IAAI,CAAC;AAC/D,WAAK,EAAE,SAAS,MAAM;AACtB,aAAO;AAAA,IACT;AAEA,QAAI;AACF,YAAM,QAAQ,IAAI,QAAQ,IAAI,cAAc,KAAK;AACjD,UAAI,CAAC,MAAM,SAAS,qBAAqB,GAAG;AAC1C,cAAMA,KAAI,IAAI,SAAS,gCAAgC,EAAE,QAAQ,IAAI,CAAC;AACtE,aAAKA,GAAE,SAAS,MAAM;AACtB,eAAOA;AAAA,MACT;AAEA,YAAM,OAAO,MAAM,IAAI,SAAS;AAMhC,YAAM,SAA4D,CAAC;AAEnE,YAAM,cAAc,KAAK,OAAO,kBAAkB;AAClD,iBAAW,KAAK,aAAa;AAC3B,YAAI,OAAO,MAAM,YAAY,EAAE,WAAW,aAAa,GAAG;AACxD,iBAAO,KAAK,EAAE,MAAM,aAAa,WAAW,EAAE,KAAK,EAAE,EAAE,CAAC;AAAA,QAC1D;AAAA,MACF;AAEA,YAAM,UAAU,KAAK,OAAO,UAAU;AACtC,iBAAW,KAAK,SAAS;AACvB,YAAI,aAAa,MAAM;AAErB,gBAAM,MAAM,MAAM,EAAE,YAAY;AAChC,gBAAM,MAAM,KAAK,OAAO,aAAa,GAAG,IAAI,WAAW,GAAG,CAAC,CAAC;AAC5D,gBAAM,OAAO,EAAE,QAAQ;AACvB,iBAAO,KAAK,EAAE,MAAM,aAAa,WAAW,EAAE,KAAK,QAAQ,IAAI,WAAW,GAAG,GAAG,EAAE,CAAC;AAAA,QACrF;AAAA,MACF;AAEA,UAAI,OAAO,WAAW,GAAG;AACvB,cAAMA,KAAI,IAAI,SAAS,sBAAsB,EAAE,QAAQ,IAAI,CAAC;AAC5D,aAAKA,GAAE,SAAS,MAAM;AACtB,eAAOA;AAAA,MACT;AACA,UAAI,OAAO,SAAS,IAAI;AACtB,cAAMA,KAAI,IAAI,SAAS,+BAA+B,EAAE,QAAQ,IAAI,CAAC;AACrE,aAAKA,GAAE,SAAS,MAAM;AACtB,eAAOA;AAAA,MACT;AAGA,YAAM,UAAU;AAAA,QACd,OAAO;AAAA,QACP,UAAU;AAAA,UACR,EAAE,MAAM,UAAU,SAAS,CAAC,EAAE,MAAM,QAAQ,MAAM,cAAc,CAAC,EAAE;AAAA,UACnE,EAAE,MAAM,QAAQ,SAAS,CAAC,EAAE,MAAM,QAAQ,MAAM,kBAAkB,GAAG,GAAG,MAAM,EAAE;AAAA,QAClF;AAAA,QACA,iBAAiB;AAAA,UACf,MAAM;AAAA,UACN,aAAa;AAAA,QACf;AAAA,QACA,aAAa;AAAA,MACf;AAEA,YAAM,MAAM,MAAM,MAAM,uCAAuC;AAAA,QAC7D,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,iBAAiB,UAAU,IAAI,cAAc;AAAA,UAC7C,gBAAgB;AAAA,QAClB;AAAA,QACA,MAAM,KAAK,UAAU,OAAO;AAAA,MAC9B,CAAC;AAED,UAAI,CAAC,IAAI,IAAI;AACX,cAAM,UAAU,MAAM,IAAI,KAAK;AAC/B,cAAMA,KAAI,IAAI,SAAS,iBAAiB,IAAI,MAAM,IAAI,OAAO,IAAI,EAAE,QAAQ,IAAI,CAAC;AAChF,aAAKA,GAAE,SAAS,MAAM;AACtB,eAAOA;AAAA,MACT;AAGA,YAAM,OAAO,MAAM,IAAI,KAAK;AAG5B,YAAM,aACJ,KAAK,eACL,KAAK,SAAS,CAAC,GAAG,UAAU,CAAC,GAAG,QAChC,KAAK,UAAU,CAAC,GAAG,SAAS;AAE9B,YAAM,OAAO,OAAO,eAAe,WAAW,aAAa,KAAK,UAAU,UAAU;AAEpF,YAAM,IAAI,IAAI,SAAS,MAAM,EAAE,QAAQ,KAAK,SAAS,EAAE,gBAAgB,mBAAmB,EAAE,CAAC;AAC7F,WAAK,EAAE,SAAS,MAAM;AACtB,aAAO;AAAA,IAET,SAAS,GAAQ;AACf,YAAM,IAAI,IAAI,SAAS,iBAAiB,GAAG,WAAW,CAAC,IAAI,EAAE,QAAQ,IAAI,CAAC;AAC1E,WAAK,EAAE,SAAS,IAAI,kBAAkB,GAAG;AACzC,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;AChIA,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,UAAE;AACD,QAAI;AACH,UAAI,QAAQ,SAAS,QAAQ,CAAC,QAAQ,UAAU;AAC/C,cAAM,SAAS,QAAQ,KAAK,UAAU;AACtC,eAAO,EAAE,MAAM,OAAO,KAAK,GAAG,MAAM;AAAA,QAAC;AAAA,MACtC;AAAA,IACD,SAAS,GAAG;AACX,cAAQ,MAAM,4CAA4C,CAAC;AAAA,IAC5D;AAAA,EACD;AACD,GAb8B;AAe9B,IAAO,6CAAQ;;;ACZJ,IAAM,mCAAmC;AAAA,EAE9B;AAClB;AACA,IAAO,sCAAQ;;;ACenB,IAAM,wBAAsC,CAAC;AAKtC,SAAS,uBAAuB,MAAqC;AAC3E,wBAAsB,KAAK,GAAG,KAAK,KAAK,CAAC;AAC1C;AAFgB;AAShB,SAAS,uBACR,SACA,KACA,KACA,UACA,iBACsB;AACtB,QAAM,CAAC,MAAM,GAAG,IAAI,IAAI;AACxB,QAAM,gBAAmC;AAAA,IACxC;AAAA,IACA,KAAK,YAAY,QAAQ;AACxB,aAAO,uBAAuB,YAAY,QAAQ,KAAK,UAAU,IAAI;AAAA,IACtE;AAAA,EACD;AACA,SAAO,KAAK,SAAS,KAAK,KAAK,aAAa;AAC7C;AAfS;AAiBF,SAAS,kBACf,SACA,KACA,KACA,UACA,iBACsB;AACtB,SAAO,uBAAuB,SAAS,KAAK,KAAK,UAAU;AAAA,IAC1D,GAAG;AAAA,IACH;AAAA,EACD,CAAC;AACF;AAXgB;;;AC3ChB,IAAM,iCAAN,MAAM,gCAA8D;AAAA,EAGnE,YACU,eACA,MACT,SACC;AAHQ;AACA;AAGT,SAAK,WAAW;AAAA,EACjB;AAAA,EArBD,OAYoE;AAAA;AAAA;AAAA,EAC1D;AAAA,EAUT,UAAU;AACT,QAAI,EAAE,gBAAgB,kCAAiC;AACtD,YAAM,IAAI,UAAU,oBAAoB;AAAA,IACzC;AAEA,SAAK,SAAS;AAAA,EACf;AACD;AAEA,SAAS,oBAAoB,QAA0C;AAEtE,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAEA,QAAM,kBAA+C,gCACpD,SACA,KACA,KACC;AACD,QAAI,OAAO,UAAU,QAAW;AAC/B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,OAAO,MAAM,SAAS,KAAK,GAAG;AAAA,EACtC,GATqD;AAWrD,SAAO;AAAA,IACN,GAAG;AAAA,IACH,MAAM,SAAS,KAAK,KAAK;AACxB,YAAM,aAAyB,gCAAU,MAAM,MAAM;AACpD,YAAI,SAAS,eAAe,OAAO,cAAc,QAAW;AAC3D,gBAAM,aAAa,IAAI;AAAA,YACtB,KAAK,IAAI;AAAA,YACT,KAAK,QAAQ;AAAA,YACb,MAAM;AAAA,YAAC;AAAA,UACR;AACA,iBAAO,OAAO,UAAU,YAAY,KAAK,GAAG;AAAA,QAC7C;AAAA,MACD,GAT+B;AAU/B,aAAO,kBAAkB,SAAS,KAAK,KAAK,YAAY,eAAe;AAAA,IACxE;AAAA,EACD;AACD;AAxCS;AA0CT,SAAS,qBACR,OAC8B;AAE9B,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAGA,SAAO,cAAc,MAAM;AAAA,IAC1B,mBAAyE,wBACxE,SACA,KACA,QACI;AACJ,WAAK,MAAM;AACX,WAAK,MAAM;AACX,UAAI,MAAM,UAAU,QAAW;AAC9B,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACvE;AACA,aAAO,MAAM,MAAM,OAAO;AAAA,IAC3B,GAXyE;AAAA,IAazE,cAA0B,wBAAC,MAAM,SAAS;AACzC,UAAI,SAAS,eAAe,MAAM,cAAc,QAAW;AAC1D,cAAM,aAAa,IAAI;AAAA,UACtB,KAAK,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,MAAM;AAAA,UAAC;AAAA,QACR;AACA,eAAO,MAAM,UAAU,UAAU;AAAA,MAClC;AAAA,IACD,GAT0B;AAAA,IAW1B,MAAM,SAAwD;AAC7D,aAAO;AAAA,QACN;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACD;AAnDS;AAqDT,IAAI;AACJ,IAAI,OAAO,wCAAU,UAAU;AAC9B,kBAAgB,oBAAoB,mCAAK;AAC1C,WAAW,OAAO,wCAAU,YAAY;AACvC,kBAAgB,qBAAqB,mCAAK;AAC3C;AACA,IAAO,kCAAQ;",
  "names": ["r"]
}
